#!/bin/bash

export NPM_INSTALL='graphql fs uuid https'
export NPM_INSTALL_LOCAL_ONLY='express aws-sdk'
export FRONTEND_PORT=3000
export BACKEND_PORT=3001
export DYNAMODB_PORT=9520
export GRAPHQL_ENDPOINT=http://localhost:$BACKEND_PORT/graphql

export AWS_REGION=us-east-1
export DYNAMODB_ENDPOINT=http://localhost:$DYNAMODB_PORT
export TABLE_NAME=Table
export ALLOW_ORIGIN="http://localhost:3000"

export DEFAULT_EVENTCODE=1
export DEFAULT_GROUPID=Event-$DEFAULT_EVENTCODE
export DEFAULT_UUID=a7feab21-5fe1-45f1-b7d3-8a436decb466
export DEFAULT_USERID=User-$DEFAULT_UUID
export DEFAULT_EVENT='{"userId":{"S":"'$DEFAULT_GROUPID'"},"groupId":{"S":"'$DEFAULT_GROUPID'"},"code":{"S":"'$DEFAULT_EVENTCODE'"},"place":{"M":{"googlePlaceId":{"S":"ChIJ7VHBwnZ644kRKRWP5Qe27v4"}}},"eventName":{"S":"Royale"}}'
export DEFAULT_USER='{"userId":{"S":"'$DEFAULT_USERID'"},"groupId":{"S":"'$DEFAULT_USERID'"},"userName":{"S":"Jay"},"uuid":{"S":"'$DEFAULT_UUID'"}}'
#export DEFAULT_EVENTUSER='{"userId":{"S":"'$DEFAULT_USERID'"},"groupId":{"S":"'$DEFAULT_GROUPID'"}}'
#export VAPID_PUBLIC_KEY=BL_mVA1u7cqRZkb5cwF3fcT_371yrdXqBwXlQM5jTQL2yvrG0Tya2hEBxa_2AHntMjfMbEAOu020u1iKn7Rx-Uc
#export VAPID_PRIVATE_KEY=79jcrPY14NJWixhjyoxXnRcEYXamlg7wRrbv_Bu7qMc

function test_post {
  ADDSPACE1=${1//\{/ \{ }
  ADDSPACE2=${ADDSPACE1//\}/ \} }
  ADDSPACE3=${ADDSPACE2//\,/\, }
  echo "Request:"$ADDSPACE3
  curl $GRAPHQL_ENDPOINT -XPOST -H "Cookie: SESSION_ID=$DEFAULT_UUID" -d '{"query":"'$1'"}' 2>/dev/null | python -mjson.tool
  echo ""
  echo "============================="
}

case $1 in
  "check")
    echo "============================="
    echo "DynamoDB is running?"
    ps a | grep DynamoDB | grep -v grep
    echo "============================="
    echo "List of local DynamoDB tables"
    aws --endpoint-url $DYNAMODB_ENDPOINT dynamodb list-tables
    echo "============================="
    echo "List of items in Events table"
    aws --endpoint-url $DYNAMODB_ENDPOINT dynamodb scan --table-name $TABLE_NAME
    echo "============================="
    echo "Node.js is running?"
    ps a | grep "node dev_server.js" | grep -v grep
    echo "============================="
    echo "Check that guests can call { me { name } } and get returned set-cookie"
    curl -i $GRAPHQL_ENDPOINT -XPOST -d '{"query":"{me{name}}"}' 2>/dev/null | grep -i set-cookie
    echo "============================="
    test_post '{me{name}}'
    test_post '{event(code:\"1\"){code,name,endedTime,scheduledTime,place{googlePlaceId,address,latitude,longitude,photoUrl},me{duration,updatedTime,travelMode,hasLeft,user{name}},numAttendees,eventUsers{duration,updatedTime,travelMode,hasLeft,user{name}},notifications{message,createdTime,reactions{emoji,user{name}}}}}'
    test_post 'mutation{editMe(user:{name:\"Jay2\"}){name}}'
    test_post 'mutation{createEvent(event:{place:{googlePlaceId:\"hi\"}}){code,name,endedTime,scheduledTime,place{googlePlaceId,address,latitude,longitude,photoUrl}}}'
    test_post 'mutation{joinEvent(code:\"1\"){user{name},duration,updatedTime,travelMode,hasLeft}}'
    test_post 'mutation{editEvent(code:\"1\",event:{place:{address:\"hi\"},name:\"royale2\",scheduledTime:\"123\"}){code,name,endedTime,scheduledTime,place{address}}}'
    test_post 'mutation{updateEventUser(eventCode:\"1\",eventUser:{duration:250,updatedTime:\"'$(date +%s)'\",travelMode:\"DRIVING\",hasLeft:true}){user{name},duration,updatedTime,travelMode,hasLeft}}'
    test_post 'mutation{endEvent(code:\"1\"){endedTime}}'
    test_post '{me{name}}'
    test_post '{event(code:\"1\"){code,name,endedTime,scheduledTime,place{googlePlaceId,address,latitude,longitude,photoUrl},me{duration,updatedTime,travelMode,hasLeft,user{name}},numAttendees,eventUsers{duration,updatedTime,travelMode,hasLeft,user{name}},notifications{message,createdTime,reactions{emoji,user{name}}}}}'
    #test_post 'mutation{createReaction(eventCode:\"1\",notificationIndex:0,reaction:{emoji:\"Hi\"}){user{name},emoji}}'
    #test_post 'mutation{deleteReaction(eventCode:\"1\",notificationIndex:0,reaction:{emoji:\"Hi\"}){user{name},emoji}}'
    ;;

  "lambda")
    rm -rf node_modules
    echo "Installing node_modules..."
    npm install $NPM_INSTALL &>/dev/null
    echo "Zipping source files..."
    zip -r lambda.zip index.js schema node_modules >/dev/null
    echo "Uploading source package to S3..."
    aws s3 cp lambda.zip s3://cobyo.backend/lambda.zip >/dev/null
    rm -rf lambda.zip node_modules
    eval `aws lambda list-functions | python -c "import json,sys; print \"export LAMBDA_FUNCTION_NAME=%s\" % json.load(sys.stdin)['Functions'][0]['FunctionName']"`
    echo "Updating lambda function code for $LAMBDA_FUNCTION_NAME..."
    aws lambda update-function-code --s3-bucket cobyo.backend --s3-key lambda.zip --function-name $LAMBDA_FUNCTION_NAME
    ;;

  "form")
    aws cloudformation deploy --template-file config.yaml --stack cobyo --capabilities CAPABILITY_IAM
    aws dynamodb put-item --table-name $TABLE_NAME --item $DEFAULT_EVENT
    aws dynamodb put-item --table-name $TABLE_NAME --item $DEFAULT_USER
    echo "Manual: Delete 'Stage' on api gateway, delete log-group on cloudwatch"
    ;;

  "delete")
    aws cloudformation delete-stack --stack-name cobyo
    ;;

  "dev")
    java -jar DynamoDBLocal.jar -sharedDb -inMemory -port $DYNAMODB_PORT >/dev/null &
    PID=$!
    trap "kill -TERM $PID" TERM INT
    aws --endpoint-url $DYNAMODB_ENDPOINT dynamodb create-table --table-name $TABLE_NAME --attribute-definitions AttributeName=userId,AttributeType=S AttributeName=groupId,AttributeType=S --key-schema AttributeName=userId,KeyType=HASH AttributeName=groupId,KeyType=RANGE --global-secondary-index IndexName=Group,KeySchema='[{AttributeName=groupId,KeyType=HASH},{AttributeName=userId,KeyType=RANGE}]',Projection='{ProjectionType=ALL}',ProvisionedThroughput='{ReadCapacityUnits=1,WriteCapacityUnits=1}' --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 >/dev/null
    aws --endpoint-url $DYNAMODB_ENDPOINT dynamodb put-item --table-name $TABLE_NAME --item $DEFAULT_EVENT
    aws --endpoint-url $DYNAMODB_ENDPOINT dynamodb put-item --table-name $TABLE_NAME --item $DEFAULT_USER
    node dev_server.js
    ;;

  "install")
    npm install $NPM_INSTALL_LOCAL_ONLY $NPM_INSTALL
    rm -f package-lock.json
    ;;

  *)
    echo "Usage: ./run [command]"
    echo ""
    echo "[command]"
    echo "check     checks whether local backend is running"
    echo "lambda    deploys lambda only"
    echo "form      deploys cloudformation"
    echo "delete    deletes cloudformation"
    echo "dev       runs local backend"
    echo "install   installs local backend package"
    ;;
esac
